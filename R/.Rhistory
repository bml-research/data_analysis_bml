formatted_table(head(big4))
# Select the columns for the country and the footprints (use the `ends_with()` function) for the four selected European countries.
#eu_footprint <- big4 %>%
#  arrange(Country) %>%
#  select(Country, ends_with("Footprint"))
#formatted_table(head(eu_footprint))
# Create a radar chart from the data with the footprints for the 4 European countries.
big4_fp <- ggradar(big4,  legend.text.size = 8, values.radar = c("0", "1.5", "3.0"), axis.label.size = 2.5, grid.label.size = 3, legend.position = "right") +
labs(title = "Ecological footprints of the 4 highest populated European countries") +
theme(plot.title = element_text(size = 14, ))
big4_fp
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(kableExtra)
library(knitr)
library(pillar)
formatted_table <- function(df) {
col_types <- sapply(df, pillar::type_sum)
new_col_names <- paste0(names(df), "<br>", "<span style='font-weight: normal;'>", col_types, "</span>")
kbl(df, col.names = new_col_names, escape = F, format = "html") %>%
kable_styling(bootstrap_options = c("striped", "hoover", "responsive"))
}
# Read the data on dinosaurs.
dino_data <- read_csv2("./files_13_data_visualization_exercises/add_exercises/dinoDatasetCSV.csv")
# Replace any missing data with NA values.
# Hint: check which columns are of character type, but contains numbers.
tibble1 <- tibble(dino_data) %>%
replace(.== "?", NA) %>%
mutate(length_m = as.numeric(length_m)) %>%
mutate(weight_kg = as.numeric(weight_kg)) %>%
mutate(height_m = as.numeric(height_m))
formatted_table(head(tibble1))
# Select the dinosaurs from the Middle Cretaceous period and sort them on scientific name and drop the rows that have NA values.
cretaceous <- tibble1 %>%
filter(period == "Middle Cretaceous") %>%
drop_na()
# Select only the columns containing the period, scientific name, length, weight and height.
sel_data <- cretaceous %>%
arrange(scientific_name) %>%
select(period, scientific_name, length_m, weight_kg, height_m)
# Change the colnames.
colnames(sel_data) <- c("Period", "Scientific name", "Length (m)",
"Weight (kg)", "Height (m)")
formatted_table(head(sel_data))
# Create a bar chart with ggplot of the weight.
bar_dino <- ggplot(data = sel_data, aes(x = `Scientific name`, y = `Weight (kg)`)) +
geom_bar(stat="identity", fill="steelblue") +
labs(title="Weight of dinosaurs from the Cretaceous period") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
bar_dino
# Make the data tidy. Check if the data is indeed tidy (length and height should be indicated in a column called dimension).
tidy_data <- sel_data %>%
pivot_longer(c(`Length (m)`, `Height (m)`), names_to = "Dimension",
values_to = "Size (m)")
formatted_table(head(tidy_data))
# Plot the grouped bar chart.
dino_size1 <- ggplot(tidy_data, aes(`Scientific name`, `Size (m)`,
fill = Dimension)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title="Length and height for dinosaurs from the Cretaceous period",
y = "Size (m)") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 7),
axis.title.x = element_blank()) # leave out title of the x-axis
dino_size1
# Create a percentage bar chart.
perc_dino_size1 <- ggplot(tidy_data, aes(`Scientific name`, `Size (m)`,
fill = `Dimension`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="Length and height for dinosaurs from the Cretaceous period") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 7),
axis.title.x = element_blank())
perc_dino_size1
# First, change the column of 'Dimension' to a factor type of data.
tidy_data <- tidy_data %>%
mutate(Dimension = factor(Dimension,
levels = c("Length (m)", "Height (m)")))
levels(tidy_data$Dimension)
# Second, plot the grouped bar chart.
dino_size2 <- ggplot(tidy_data, aes(`Scientific name`, `Size (m)`,
fill = Dimension)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title="Length and height for dinosaurs from the Cretaceous period",
y = "Size (m)") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 7),
axis.title.x = element_blank())
dino_size2
# Create the percentage bar chart.
perc_dino_size2 <- ggplot(tidy_data, aes(`Scientific name`, `Size (m)`,
fill = `Dimension`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="Length and height for dinosaurs from the Cretaceous period") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 8),
axis.title.x = element_blank())
perc_dino_size2
# Select the seven longest dinosaurs. Check your bar chart with the length and height of each Cretaceous dinosaur. Save these seven to a vector.
long_dino <- c("Dongyangosaurus", "Elaltitan", "Titanomachya", "Epachthosaurus", "Udelartitan",
"Volgatitan", "Zhuchengtitan")
# Filter the data set using this vector.
df_long_dino1 <- sel_data %>%
filter(`Scientific name`%in%long_dino)
formatted_table(df_long_dino1)
# OR select by using `slice_max()` and change the `Scientific name` to factor type of data (creates order in the pie chart):
df_long_dino2 <- sel_data %>%
slice_max(order_by = `Length (m)`, n = 7) %>%
mutate(`Scientific name` = factor(`Scientific name`,
levels = `Scientific name`))
formatted_table(df_long_dino2)
# Create the pie chart based on the weight of these dinosaurs.
dino_pie1 <- ggplot(df_long_dino2, aes(x = "", y = `Length (m)`,
fill = `Scientific name`))+
geom_bar(stat="identity", width = 1) +
coord_polar("y", start=0, direction = -1) +
labs(title="Length for the largest Cretaceous dinosaur species") +
geom_text(aes(label = `Length (m)`), position = position_stack(vjust = 0.5)) + # add values to the pieces of the pie.
theme_void() # remove background, grid, numeric labels
dino_pie1
# First, the position of the labels outside the pie chart have to be determined
library(ggrepel)
fancy_pie <- df_long_dino2 %>%
# position the labels outside the pie chart correctly
mutate(csum = rev(cumsum(rev(`Length (m)`))),
pos = `Length (m)`/2 + lead(csum, 1),
pos = if_else(is.na(pos), `Length (m)`/2, pos))
# Now plot the pie chart and insert the labels with `geom_label_repel()`.
dino_pie2 <- ggplot(fancy_pie,
aes(x = "", y = `Length (m)`,
fill = fct_inorder(`Scientific name`))) +
geom_bar(stat="identity", width = 1) +
coord_polar("y", start=0, direction = -1) +
scale_fill_brewer(palette = "Set3") + # color set for the pie chart
# Create labels outside the pie chart
geom_label_repel(data = fancy_pie,
aes(y = pos, label = `Length (m)`),
size = 3.5, nudge_x = 0.75, show.legend = FALSE) +
labs(title="Length for the largest Cretaceous dinosaur species") +
guides(fill = guide_legend(title = "Dinosaur")) +
theme_void() # remove background, grid, numeric labels
dino_pie2
# Exclude (use `filter()`on tibble1) the dinosaurs that are heavier than 10000 kg
# Drop any NA values.
# Select the columns period, scientific name, length, weight and height,
# Make the data in the column period factor type data: Triassic < Jurassic < Cretaceous,
# Save the data in tibble2.
tibble2 <- tibble1 %>%
filter(weight_kg <= 10000) %>%
drop_na() %>%
select(period, scientific_name, length_m, weight_kg, height_m) %>%
mutate(period = factor(period, levels = c("Early Triassic", "Middle Triassic", "Late Triassic",
"Early Jurassic", "Middle Jurassic", "Late Jurassic",
"Early Cretaceous", "Middle Cretaceous", "Late Cretaceous")))
colnames(tibble2) <- c("Period", "Scientific name", "Length (m)",
"Weight (kg)", "Height (m)")
formatted_table(head(tibble2))
# Create a boxplot for the height of the dinosaurs for each period in time.
height_period <- ggplot(tibble2, aes(x = `Period`, y = `Height (m)`)) +
geom_boxplot() +
labs(title="Height of dinosaurs in different periods in time",
x = "Period", y = "Height (m)") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
height_period
# First make a tidy tibble from tibble2.
tidy_period <- tibble2 %>%
pivot_longer(c(`Length (m)`, `Height (m)`), names_to = "Dimension",
values_to = "Size (m)")
formatted_table(head(tidy_period))
# Now create the boxplot.
size_period1 <- ggplot(tidy_period, aes(x = `Period`, y = `Size (m)`, fill = Dimension)) +
geom_boxplot() +
labs(title="Length and height for dinosaurs in different time periods") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
size_period1
# Make the column for 'Dimension' a factor type.
tidy_period <- tidy_period %>%
mutate(Dimension = factor(Dimension, levels = c("Length (m)", "Height (m)")))
formatted_table(head(tidy_period))
# Create the boxplot.
size_period2 <- ggplot(tidy_period, aes(x = `Period`, y = `Size (m)`, fill = Dimension)) +
geom_boxplot() +
labs(title="Length and height for dinosaurs in different time periods") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
size_period2
# Create a violin chart from the Height (m) for the different time periods.
length_period <- ggplot(tibble2, aes(x = `Period`, y = `Height (m)`)) +
geom_violin() +
labs(title="Length of dinosaurs in different time periods") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
length_period
# Read the data from the file and save it in df1.
df1 <- read.csv2("./files_13_data_visualization_exercises/add_exercises/climate_disease_dataset.csv")
# Filter on the countries of the Netherlands, Sweden, Portugal and Hungary and the year 2023.
df2 <- df1 %>%
filter(country == "Netherlands" | country == "Sweden" | country == "Portugal" |
country == "Hungary") %>%
slice_max(order_by = date, n = 480)
# Turn the first column to dates.
df2$date <- as.Date(df2$date, "%d/%m/%Y")
formatted_table(head(df2))
# Create a line plot of the average precipitation against the date for the four selected continents with tidy data from df2.
line_plot1 <- ggplot(df2, aes(x = date, y = precipitation_mm, group = country)) +
geom_line() +
labs(title="Average precipitation (in mm) per month", x = "Date",
y = "Precipitation (mm)")
line_plot1
# Use different types of lines to distinguish the data from the different countries.
line_plot2 <- ggplot(df2, aes(x = date, y = precipitation_mm, group = country)) +
geom_line(aes(linetype = country)) +
labs(title="Average precipitation (in mm) per month", x = "Date",
y = "Precipitation (mm)")
line_plot2
# Create the same line plot as before, but use colors to distinguish the data for the different countries.
line_plot3 <- ggplot(df2, aes(x = date, y = precipitation_mm, group = country)) +
geom_line(aes(color = country)) +
labs(title="Average precipitation (in mm) per month", x = "Date",
y = "Precipitation (mm)")
line_plot3
# Add a trendline to the plot.
line_plot4 <- ggplot(df2, aes(x = date, y = precipitation_mm)) +
geom_line(aes(color = country)) +
labs(title="Average precipitation (in mm) per month") +
geom_smooth(method="lm")
line_plot4
# REMOVE THE HASH TAGS IN THE NEXT TWO LINES IF YOU HAVE NOT INSTALLED THE REMOTES PACKAGE YET.
#install.packages("remotes")
#remotes::install_github("ricardo-bion/ggradar")
library(ggradar)
# Read the data and store it in a data frame.
footprint <- read_csv("./files_13_data_visualization_exercises/add_exercises/Global_Ecological_Footprint_2023.csv")
# Check which four European countries have the highest population.
# Select the columns for the country and the footprints (use the `ends_with()` function) for the four selected European countries.
big4 <- footprint %>%
filter(Region == "EU-27") %>%
slice_max(order_by = `Population (millions)`, n = 4) %>%
arrange(Country) %>%
select(Country, ends_with("Footprint"))
formatted_table(head(big4))
# Create a radar chart from the data with the footprints for the 4 European countries.
big4_fp <- ggradar(big4,  legend.text.size = 8, values.radar = c("0", "1.5", "3.0"), axis.label.size = 2.5, grid.label.size = 3, legend.position = "right") +
labs(title = "Ecological footprints of the 4 highest populated European countries") +
theme(plot.title = element_text(size = 14, ))
big4_fp
# Create a bubble chart for the total the 'number of countries required' vs 'biocapacity' and as third dimension the 'population'.
bubble_big4 <- ggplot(big4, aes(x = `Total biocapacity`, y = `Number of Countries required`)) +
geom_point(aes(color = Country, size = `Population (millions)`), alpha = 0.5) +
scale_size_area(max_size = 10)
bubble_big4
# Use the original data frame
# Check which four European countries have the highest population.
# Select the columns for the country and the footprints (use the `ends_with()` function) for the four selected European countries.
big4_fp <- footprint %>%
filter(Region == "EU-27") %>%
slice_max(order_by = `Population (millions)`, n = 4) %>%
formatted_table(head(big4))
# Use the original data frame
# Check which four European countries have the highest population.
# Select the columns for the country and the footprints (use the `ends_with()` function) for the four selected European countries.
big4_fp <- footprint %>%
filter(Region == "EU-27") %>%
slice_max(order_by = `Population (millions)`, n = 4) %>%
formatted_table(head(big4_fp))
# Use the original data frame
# Check which four European countries have the highest population.
# Select the columns for the country and the footprints (use the `ends_with()` function) for the four selected European countries.
big4_fp <- footprint %>%
filter(Region == "EU-27") %>%
slice_max(order_by = `Population (millions)`, n = 4)
formatted_table(head(big4_fp))
# Create a bubble chart for the total the 'number of countries required' vs 'biocapacity' and as third dimension the 'population'.
bubble_big4 <- ggplot(big4_fp, aes(x = `Total biocapacity`, y = `Number of Countries required`)) +
geom_point(aes(color = Country, size = `Population (millions)`), alpha = 0.5) +
scale_size_area(max_size = 10)
bubble_big4
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(kableExtra)
library(knitr)
library(pillar)
formatted_table <- function(df) {
col_types <- sapply(df, pillar::type_sum)
new_col_names <- paste0(names(df), "<br>", "<span style='font-weight: normal;'>", col_types, "</span>")
kbl(df, col.names = new_col_names, escape = F, format = "html") %>%
kable_styling(bootstrap_options = c("striped", "hoover", "responsive"))
}
# Read the data on dinosaurs.
dino_data <- read_csv2("./files_13_data_visualization_exercises/add_exercises/dinoDatasetCSV.csv")
# Replace any missing data with NA values.
# Hint: check which columns are of character type, but contains numbers.
tibble1 <- tibble(dino_data) %>%
replace(.== "?", NA) %>%
mutate(length_m = as.numeric(length_m)) %>%
mutate(weight_kg = as.numeric(weight_kg)) %>%
mutate(height_m = as.numeric(height_m))
formatted_table(head(tibble1))
# Select the dinosaurs from the Middle Cretaceous period and sort them on scientific name and drop the rows that have NA values.
cretaceous <- tibble1 %>%
filter(period == "Middle Cretaceous") %>%
drop_na()
# Select only the columns containing the period, scientific name, length, weight and height.
sel_data <- cretaceous %>%
arrange(scientific_name) %>%
select(period, scientific_name, length_m, weight_kg, height_m)
# Change the colnames.
colnames(sel_data) <- c("Period", "Scientific name", "Length (m)",
"Weight (kg)", "Height (m)")
formatted_table(head(sel_data))
# Create a bar chart with ggplot of the weight.
bar_dino <- ggplot(data = sel_data, aes(x = `Scientific name`, y = `Weight (kg)`)) +
geom_bar(stat="identity", fill="steelblue") +
labs(title="Weight of dinosaurs from the Cretaceous period") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
bar_dino
# Make the data tidy. Check if the data is indeed tidy (length and height should be indicated in a column called dimension).
tidy_data <- sel_data %>%
pivot_longer(c(`Length (m)`, `Height (m)`), names_to = "Dimension",
values_to = "Size (m)")
formatted_table(head(tidy_data))
# Plot the grouped bar chart.
dino_size1 <- ggplot(tidy_data, aes(`Scientific name`, `Size (m)`,
fill = Dimension)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title="Length and height for dinosaurs from the Cretaceous period",
y = "Size (m)") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 7),
axis.title.x = element_blank()) # leave out title of the x-axis
dino_size1
# Create a percentage bar chart.
perc_dino_size1 <- ggplot(tidy_data, aes(`Scientific name`, `Size (m)`,
fill = `Dimension`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="Length and height for dinosaurs from the Cretaceous period") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 7),
axis.title.x = element_blank())
perc_dino_size1
# First, change the column of 'Dimension' to a factor type of data.
tidy_data <- tidy_data %>%
mutate(Dimension = factor(Dimension,
levels = c("Length (m)", "Height (m)")))
levels(tidy_data$Dimension)
# Second, plot the grouped bar chart.
dino_size2 <- ggplot(tidy_data, aes(`Scientific name`, `Size (m)`,
fill = Dimension)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title="Length and height for dinosaurs from the Cretaceous period",
y = "Size (m)") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 7),
axis.title.x = element_blank())
dino_size2
# Create the percentage bar chart.
perc_dino_size2 <- ggplot(tidy_data, aes(`Scientific name`, `Size (m)`,
fill = `Dimension`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="Length and height for dinosaurs from the Cretaceous period") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 8),
axis.title.x = element_blank())
perc_dino_size2
# Select the seven longest dinosaurs. Check your bar chart with the length and height of each Cretaceous dinosaur. Save these seven to a vector.
long_dino <- c("Dongyangosaurus", "Elaltitan", "Titanomachya", "Epachthosaurus", "Udelartitan",
"Volgatitan", "Zhuchengtitan")
# Filter the data set using this vector.
df_long_dino1 <- sel_data %>%
filter(`Scientific name`%in%long_dino)
formatted_table(df_long_dino1)
# OR select by using `slice_max()` and change the `Scientific name` to factor type of data (creates order in the pie chart):
df_long_dino2 <- sel_data %>%
slice_max(order_by = `Length (m)`, n = 7) %>%
mutate(`Scientific name` = factor(`Scientific name`,
levels = `Scientific name`))
formatted_table(df_long_dino2)
# Create the pie chart based on the weight of these dinosaurs.
dino_pie1 <- ggplot(df_long_dino2, aes(x = "", y = `Length (m)`,
fill = `Scientific name`))+
geom_bar(stat="identity", width = 1) +
coord_polar("y", start=0, direction = -1) +
labs(title="Length for the largest Cretaceous dinosaur species") +
geom_text(aes(label = `Length (m)`), position = position_stack(vjust = 0.5)) + # add values to the pieces of the pie.
theme_void() # remove background, grid, numeric labels
dino_pie1
# First, the position of the labels outside the pie chart have to be determined
library(ggrepel)
fancy_pie <- df_long_dino2 %>%
# position the labels outside the pie chart correctly
mutate(csum = rev(cumsum(rev(`Length (m)`))),
pos = `Length (m)`/2 + lead(csum, 1),
pos = if_else(is.na(pos), `Length (m)`/2, pos))
# Now plot the pie chart and insert the labels with `geom_label_repel()`.
dino_pie2 <- ggplot(fancy_pie,
aes(x = "", y = `Length (m)`,
fill = fct_inorder(`Scientific name`))) +
geom_bar(stat="identity", width = 1) +
coord_polar("y", start=0, direction = -1) +
scale_fill_brewer(palette = "Set3") + # color set for the pie chart
# Create labels outside the pie chart
geom_label_repel(data = fancy_pie,
aes(y = pos, label = `Length (m)`),
size = 3.5, nudge_x = 0.75, show.legend = FALSE) +
labs(title="Length for the largest Cretaceous dinosaur species") +
guides(fill = guide_legend(title = "Dinosaur")) +
theme_void() # remove background, grid, numeric labels
dino_pie2
# Exclude (use `filter()`on tibble1) the dinosaurs that are heavier than 10000 kg
# Drop any NA values.
# Select the columns period, scientific name, length, weight and height,
# Make the data in the column period factor type data: Triassic < Jurassic < Cretaceous,
# Save the data in tibble2.
tibble2 <- tibble1 %>%
filter(weight_kg <= 10000) %>%
drop_na() %>%
select(period, scientific_name, length_m, weight_kg, height_m) %>%
mutate(period = factor(period, levels = c("Early Triassic", "Middle Triassic", "Late Triassic",
"Early Jurassic", "Middle Jurassic", "Late Jurassic",
"Early Cretaceous", "Middle Cretaceous", "Late Cretaceous")))
colnames(tibble2) <- c("Period", "Scientific name", "Length (m)",
"Weight (kg)", "Height (m)")
formatted_table(head(tibble2))
# Create a boxplot for the height of the dinosaurs for each period in time.
height_period <- ggplot(tibble2, aes(x = `Period`, y = `Height (m)`)) +
geom_boxplot() +
labs(title="Height of dinosaurs in different periods in time",
x = "Period", y = "Height (m)") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
height_period
# First make a tidy tibble from tibble2.
tidy_period <- tibble2 %>%
pivot_longer(c(`Length (m)`, `Height (m)`), names_to = "Dimension",
values_to = "Size (m)")
formatted_table(head(tidy_period))
# Now create the boxplot.
size_period1 <- ggplot(tidy_period, aes(x = `Period`, y = `Size (m)`, fill = Dimension)) +
geom_boxplot() +
labs(title="Length and height for dinosaurs in different time periods") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
size_period1
# Make the column for 'Dimension' a factor type.
tidy_period <- tidy_period %>%
mutate(Dimension = factor(Dimension, levels = c("Length (m)", "Height (m)")))
formatted_table(head(tidy_period))
# Create the boxplot.
size_period2 <- ggplot(tidy_period, aes(x = `Period`, y = `Size (m)`, fill = Dimension)) +
geom_boxplot() +
labs(title="Length and height for dinosaurs in different time periods") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
size_period2
# Create a violin chart from the Height (m) for the different time periods.
length_period <- ggplot(tibble2, aes(x = `Period`, y = `Height (m)`)) +
geom_violin() +
labs(title="Length of dinosaurs in different time periods") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
length_period
# Read the data from the file and save it in df1.
df1 <- read.csv2("./files_13_data_visualization_exercises/add_exercises/climate_disease_dataset.csv")
# Filter on the countries of the Netherlands, Sweden, Portugal and Hungary and the year 2023.
df2 <- df1 %>%
filter(country == "Netherlands" | country == "Sweden" | country == "Portugal" |
country == "Hungary") %>%
slice_max(order_by = date, n = 480)
# Turn the first column to dates.
df2$date <- as.Date(df2$date, "%d/%m/%Y")
formatted_table(head(df2))
# Create a line plot of the average precipitation against the date for the four selected continents with tidy data from df2.
line_plot1 <- ggplot(df2, aes(x = date, y = precipitation_mm, group = country)) +
geom_line() +
labs(title="Average precipitation (in mm) per month", x = "Date",
y = "Precipitation (mm)")
line_plot1
# Use different types of lines to distinguish the data from the different countries.
line_plot2 <- ggplot(df2, aes(x = date, y = precipitation_mm, group = country)) +
geom_line(aes(linetype = country)) +
labs(title="Average precipitation (in mm) per month", x = "Date",
y = "Precipitation (mm)")
line_plot2
# Create the same line plot as before, but use colors to distinguish the data for the different countries.
line_plot3 <- ggplot(df2, aes(x = date, y = precipitation_mm, group = country)) +
geom_line(aes(color = country)) +
labs(title="Average precipitation (in mm) per month", x = "Date",
y = "Precipitation (mm)")
line_plot3
# Add a trendline to the plot.
line_plot4 <- ggplot(df2, aes(x = date, y = precipitation_mm)) +
geom_line(aes(color = country)) +
labs(title="Average precipitation (in mm) per month") +
geom_smooth(method="lm")
line_plot4
# REMOVE THE HASH TAGS IN THE NEXT TWO LINES IF YOU HAVE NOT INSTALLED THE REMOTES PACKAGE YET.
#install.packages("remotes")
#remotes::install_github("ricardo-bion/ggradar")
library(ggradar)
# Read the data and store it in a data frame.
footprint <- read_csv("./files_13_data_visualization_exercises/add_exercises/Global_Ecological_Footprint_2023.csv")
# Check which four European countries have the highest population.
# Select the columns for the country and the footprints (use the `ends_with()` function) for the four selected European countries.
big4 <- footprint %>%
filter(Region == "EU-27") %>%
slice_max(order_by = `Population (millions)`, n = 4) %>%
arrange(Country) %>%
select(Country, ends_with("Footprint"))
formatted_table(head(big4))
# Create a radar chart from the data with the footprints for the 4 European countries.
big4_fp <- ggradar(big4,  legend.text.size = 8, values.radar = c("0", "1.5", "3.0"), axis.label.size = 2.5, grid.label.size = 3, legend.position = "right") +
labs(title = "Ecological footprints of the 4 highest populated European countries") +
theme(plot.title = element_text(size = 14, ))
big4_fp
# Use the original data frame
# Check which four European countries have the highest population.
# Select the columns for the country and the footprints (use the `ends_with()` function) for the four selected European countries.
big4_fp <- footprint %>%
filter(Region == "EU-27") %>%
slice_max(order_by = `Population (millions)`, n = 4)
formatted_table(head(big4_fp))
# Create a bubble chart for the total the 'number of countries required' vs 'biocapacity' and as third dimension the 'population'.
bubble_big4 <- ggplot(big4_fp, aes(x = `Total biocapacity`, y = `Number of Countries required`)) +
geom_point(aes(color = Country, size = `Population (millions)`), alpha = 0.5) +
scale_size_area(max_size = 10)
bubble_big4
