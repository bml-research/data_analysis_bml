formatted_table(df[2, ]) #select second row
formatted_table(head(df[, 4])) #select fourth column
head(df$Calories) #select column Calories
formatted_table(df[2, 4]) #select second row and fourth column
formatted_table(head(filter(df, Calories > 900)))
formatted_table(filter(df, Category == "Chicken & Fish" & Calories > 900))
formatted_table(head(filter(df, !Category == "Chicken & Fish" & Calories > 900)))
formatted_table(head(filter(df, Calories < 100 | Calories > 900)))
formatted_table(head(filter(df, Calories == 0)))
formatted_table(head(arrange(df, Calories)))
formatted_table(head(arrange(df, desc(Calories))))
formatted_table(arrange(df, desc(Calories))[1, ])
formatted_table(head(arrange(df, Category, Calories)))
formatted_table(head(arrange(df, Category, desc(Calories))))
formatted_table(head(select(df, Category, Item, Calories)))
formatted_table(head(select(df, -Calories)))
formatted_table(head(select(df, Category, Item, starts_with("total"))))
summary(df)
summary(df$Calories)
formatted_table(summarize(df, Calories = mean(Calories)))
by_category <- group_by(df, Category)
formatted_table(summarize(by_category, Average_calories = mean(Calories)))
by_category <- group_by(df, Category)
formatted_table(summarize(by_category, average_calories = mean(Calories), average_calories_fat = mean(`Calories from Fat`)))
by_category <- group_by(df, Category)
formatted_table(summarize(by_category, average_calories = mean(Calories), sd_calories = sd(Calories), average_calories_fat = mean(`Calories from Fat`), sd_calories_from_fat = sd(`Calories from Fat`)))
round(2.40, digits = 1)
round(2.45, digits = 1)
round(2.45) #defaults to 0 digits
round(2.5) #defaults to 0 digits
?round
by_category <- group_by(df, Category)
formatted_table(summarize(by_category, average_calories = round(mean(Calories)), sd_calories = round(sd(Calories)), average_calories_fat = round(mean(`Calories from Fat`)), sd_calories_from_fat = round(sd(`Calories from Fat`))))
print("mean")
mean(df$Calories)
print("min")
min(df$Calories)
print("max")
max(df$Calories)
print("median")
median(df$Calories)
print("percentile")
quantile(df$Calories, c(0.25, 0.5, 0.75))
print("standard deviation")
sd(df$Calories)
print("standard error of the mean")
sd(df$Calories)/sqrt(length(df$Calories)) #can also be calculated using the plotrix package
by_category <- group_by(df, Category)
formatted_table(summarize_each(by_category, funs(mean, sd, se=sd(.)/sqrt(n()))))
by_category <- group_by(df, Category)
formatted_table(summarize_each(by_category, funs(mean, sd, se=sd(.)/sqrt(n()))) %>%
select(-Item_mean, -`Serving Size_mean`))
formatted_table(df %>%
group_by(Category) %>%
summarize_each(funs(mean, sd, se=sd(.)/sqrt(n()))) %>%
select(-Item_mean, -`Serving Size_mean`))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(kableExtra)
formatted_table <- function(df){
kbl(df) %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
}
file_path <- "./files_12_data_visualization/file01_menu.csv"
df <- read_csv(file_path)
formatted_table(head(df))
summ_data <- df %>%
group_by(Category) %>%
summarize_each(mean) %>%
select(Category, Calories, `Calories from Fat`) %>%
rename(`Calories total` = `Calories`)
formatted_table(summ_data)
barplot(summ_data$`Calories from Fat`,
ylab = "Calories from fat",
ylim = c(0, max(summ_data$`Calories from Fat` + 50)),
names = summ_data$Category,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "Average of calories from fat for different categories")
p <- ggplot(data = summ_data, aes(x = Category, y = `Calories from Fat`)) +
geom_bar(stat="identity", fill="steelblue") +
labs(title="Average of calories from fat for different categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
tidy_summ_data <- summ_data %>%
gather(`Calories total`, `Calories from Fat`, key = "Calories origin", value = "Amount of calories")
formatted_table(tidy_summ_data)
p <- ggplot(data = tidy_summ_data, aes(x = Category, y = `Amount of calories`, fill = `Calories origin`)) +
geom_bar(stat = "identity", position="dodge") +
labs(title="Average of calories from fat for different categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_summ_data, aes(x = Category, y = `Amount of calories`, fill = `Calories origin`)) +
geom_bar(stat = "identity", position="stack") +
labs(title="Average of calories from fat for different categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_summ_data, aes(x = Category, y = `Amount of calories`, fill = `Calories origin`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="Average of calories from fat for different categories", y = "Fraction of calories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
tidy_summ_data$`Calories origin` <- factor(tidy_summ_data$`Calories origin`, levels = c("Calories total", "Calories from Fat"))
levels(tidy_summ_data$`Calories origin`)
p <- ggplot(data = tidy_summ_data, aes(x = Category, y = `Amount of calories`, fill = `Calories origin`)) +
geom_bar(stat = "identity", position="dodge") +
labs(title="Average of calories from fat for different categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_summ_data, aes(x = Category, y = `Amount of calories`, fill = `Calories origin`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="Average of calories from fat for different categories", y = "Fraction of calories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(tidy_summ_data, aes(x = "", y = `Amount of calories`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="Average of calories from fat for different categories") +
theme_void() # remove background, grid, numeric labels
p
file_path <- "./files_12_data_visualization/file02_radar_data.csv"
rest_data <- read_csv(file_path)
formatted_table(rest_data)
rest_data_long <- rest_data %>% pivot_longer(cols= -1)
formatted_table(rest_data_long)
rest_data_trans <- rest_data_long %>%
pivot_wider(names_from = Category,values_from = value)
formatted_table(rest_data_trans)
rest_data_trans <- rest_data_trans %>% rename("Restaurant" = `name`)
formatted_table(rest_data_trans)
rest_data_scaled <- rest_data_trans[, -1]/1000
formatted_table(rest_data_scaled)
first_col <- rest_data_trans[, 1]
formatted_table(first_col)
rest_data <- cbind(first_col, rest_data_scaled)
formatted_table(rest_data)
library(ggradar)
p <- ggradar(rest_data,  legend.text.size = 8, values.radar = c("0", "500", "1000"), axis.label.size = 3, grid.label.size = 3, legend.position = "right") +
labs(title = "Calories from fat in different \nfood categories from different \nrestaurants") +
theme(plot.title = element_text(size = 14, ))
p
file_path <- "./files_12_data_visualization/file01_menu.csv"
df_menu <- read_csv(file_path) %>% rename(`Calories total` = `Calories`)
formatted_table(head(df_menu))
p <- ggplot(df_menu, aes(x = `Category`, y = `Calories total`)) +
geom_boxplot() +
labs(title="Calories from fat for different food categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
df_menu_trunc <- df_menu[, c(1, 2, 4, 5)]
formatted_table(df_menu_trunc)
tidy_menu <- df_menu_trunc %>%
gather(`Calories total`, `Calories from Fat`, key = "Calories origin", value = "Amount of calories")
formatted_table(tidy_menu)
p <- ggplot(tidy_menu, aes(x = `Category`, y = `Amount of calories`, fill = `Calories origin`)) +
geom_boxplot() +
labs(title="Calories from fat for different food categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
tidy_menu$`Calories origin` <- factor(tidy_menu$`Calories origin`, levels = c("Calories total", "Calories from Fat"))
levels(tidy_menu$`Calories origin`)
p <- ggplot(tidy_menu, aes(x = `Category`, y = `Amount of calories`, fill = `Calories origin`)) +
geom_boxplot() +
labs(title="Calories from fat for different food categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(df_menu, aes(x = `Category`, y = `Calories total`)) +
geom_violin() +
labs(title="Calories from fat for different food categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
library(readxl)
file_path <- "./files_12_data_visualization/file03_weight_loss.xlsx"
weight_loss <- read_excel(file_path)
formatted_table(head(weight_loss))
tidy_weight_loss <- weight_loss %>%
gather(`Diet 1`, `Diet 2`, `Diet 3`, key = "Diet", value = "Weight (kg)")
formatted_table(head(tidy_weight_loss))
p <- ggplot(data= tidy_weight_loss, aes(x = Date, y = `Weight (kg)`, group = `Diet`)) +
geom_line() +
labs(title="Weight loss from three different diets")
p
p <- ggplot(data= tidy_weight_loss, aes(x = Date, y = `Weight (kg)`, group = `Diet`)) +
geom_line(aes(linetype = `Diet`)) +
labs(title="Weight loss from three different diets")
p
p <- ggplot(data= tidy_weight_loss, aes(x = Date, y = `Weight (kg)`, group = `Diet`)) +
geom_line(aes(color = `Diet`)) +
labs(title="Weight loss from three different diets")
p
chickwts_diet1 <- ChickWeight %>% filter(Diet == 1)
formatted_table(head(chickwts_diet1))
p <- ggplot(chickwts_diet1, aes(x = Time, y = weight)) +
geom_point() +
labs(title="Chicken weigth")
p
p <- ggplot(chickwts_diet1, aes(x = Time, y = weight)) +
geom_point() +
labs(title="Chicken weigth") +
geom_smooth(method="lm")
p
library(readxl)
file_path <- "./files_12_data_visualization/file04_bubble_chart.xlsx"
bubble_data <- read_excel(file_path)
formatted_table(head(bubble_data))
p <- ggplot(bubble_data, aes(x = `Sugar Content (g/serving)`, y = `Vitamin C content (mg/serving)`)) +
geom_point(aes(color = Fruit, size = `Number of servings per year`), alpha = 0.5) +
scale_size(range = c(0.5, 12))
p
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library("tidyverse")
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library("tidyverse")
library(kableExtra)
formatted_table <- function(df){
kbl(df) %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
}
file_path_ex1 <- "./files_13_data_visualization_exercises/exercise01/Food_Product_Emissions.csv"
df_ex1 <- read_csv(file_path_ex1)
formatted_table(head(df_ex1))
barplot(df_ex1$`Total Global Average GHG Emissions per kg`,
ylab = "Total Global Average GHG Emissions per kg",
ylim = c(0, max(df_ex1$`Total Global Average GHG Emissions per kg` + 20)),
names = df_ex1$`Food product`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "Food Product Emissions")
log2(8)
`Log2 Total Global Average GHG Emissions per kg` <- log2(df_ex1$`Total Global Average GHG Emissions per kg`)
df_ex2 <- df_ex1 %>%
add_column(`Log2 Total Global Average GHG Emissions per kg`)
formatted_table(head(df_ex2))
barplot(df_ex2$`Log2 Total Global Average GHG Emissions per kg`,
ylab = "Log2 Total Global Average GHG Emissions per kg",
ylim = c(min(df_ex2$`Log2 Total Global Average GHG Emissions per kg` - 4), max(df_ex2$`Log2 Total Global Average GHG Emissions per kg` + 4)),
names = df_ex2$`Food product`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "Food Product Emissions")
df_ex3 <- df_ex1[str_detect(df_ex1$`Food product`, "Oil"), ]
formatted_table(df_ex3)
df_ex3$`Land Use Change` <- NULL
df_ex3$Feed <- NULL
df_ex3 <- df_ex3[, 1:6]
formatted_table(df_ex3)
tidy_df_ex3 <- df_ex3 %>%
gather(`Farm`, `Processing`, `Transport`, `Packaging`, `Retail`, key = "Emission origin", value = "Emission per kg")
formatted_table(head(tidy_df_ex3))
p <- ggplot(data = tidy_df_ex3, aes(x = `Food product`, y = `Emission per kg`, fill = `Emission origin`)) +
geom_bar(stat = "identity", position="dodge") +
labs(title="Food Product Emissions") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Food product`, y = `Emission per kg`, fill = `Emission origin`)) +
geom_bar(stat = "identity", position="stack") +
labs(title="Food Product Emissions") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Food product`, y = `Emission per kg`, fill = `Emission origin`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="Food Product Emissions") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(tidy_df_ex3, aes(x = "", y = `Emission per kg`, fill = `Emission origin`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="Food Product Emissions") +
theme_void() # remove background, grid, numeric labels
p
file_path <- "./files_13_data_visualization_exercises/exercise07/calories.csv"
df_ex7 <- read_csv(file_path)
formatted_table(head(df_ex7))
df_ex7 <- df_ex7 %>%
separate_wider_delim(Cals_per100grams, delim = " ", names = c("Cals_per100grams", "waste")) %>%
separate_wider_delim(KJ_per100grams, delim = " ", names = c("KJ_per100grams", "waste2")) %>%
select (-c(waste, waste2)) %>% #Note that this is a negative selection. Selects all but the listed columns.
mutate_at(c('Cals_per100grams', 'KJ_per100grams'), as.numeric) #Creates numbers from strings
formatted_table(head(df_ex7))
p <- ggplot(df_ex7, aes(x = `FoodCategory`, y = `KJ_per100grams`)) +
geom_boxplot() +
labs(title="Energy per weight in different food categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
ylab("Energy Density (KJ per 100 grams)") +
xlab("Food Category")
p
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
formatted_table(df_ex8)
library(ggradar)
df_ex8_scaled <- df_ex8[, -1]/400
formatted_table(df_ex8_scaled)
first_col <- df_ex8[, 1]
formatted_table(first_col)
df_ex8_mod <- cbind(first_col, df_ex8_scaled)
formatted_table(df_ex8_mod)
p <- ggradar(df_ex8_mod,  legend.text.size = 8, values.radar = c("0", "200", "400"), axis.label.size = 3, grid.label.size = 3, legend.position = "right") +
labs(title = "Chick weight from different diets at day 42") +
theme(plot.title = element_text(size = 14, ))
p
file_path <- "./files_13_data_visualization_exercises/exercise09/data.csv"
df_ex9 <- read_delim(file_path, delim=" ")
df_ex9$...6 <- NULL
formatted_table(head(df_ex9))
p <- ggplot(df_ex9, aes(x = `Potassium_conc`, y = `Sodium_conc`)) +
geom_point(aes(size = `Calories`), alpha = 0.5) +
scale_size(range = c(0.5, 12)) +
geom_text(aes(label=Item)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)")
p
file_path <- "./files_13_data_visualization_exercises/exercise10/meat-production-tonnes.csv"
df_ex10 <- read_csv(file_path)
df_ex10 <- rename(df_ex10, `Total mass (tonnes)`= `Meat, total | 00001765 || Production | 005510 || tonnes`)
formatted_table(head(df_ex10))
df_ex10_asia <- df_ex10 %>%
filter(Entity == "Asia")
formatted_table(head(df_ex10_asia))
p <- ggplot(data= df_ex10_asia, aes(x = Year, y = `Total mass (tonnes)`)) +
geom_line() +
labs(title="Meat production in Asia")
p
p <- ggplot(data= df_ex10_asia, aes(x = Year, y = `Total mass (tonnes)`)) +
geom_point() +
labs(title="Meat production in Asia")
p
file_path <- "./files_13_data_visualization_exercises/exercise11/calories.csv"
df_ex11 <- read_csv(file_path)
formatted_table(head(df_ex11))
df_ex11 <- df_ex11 %>%
separate_wider_delim(Cals_per100grams, delim = " ", names = c("Cals_per100grams", "waste")) %>%
separate_wider_delim(KJ_per100grams, delim = " ", names = c("KJ_per100grams", "waste2")) %>%
select (-c(waste, waste2)) %>% #Note that this is a negative selection. Selects all but the listed columns.
mutate_at(c('Cals_per100grams', 'KJ_per100grams'), as.numeric) #Creates numbers from strings
formatted_table(head(df_ex11))
df_ex11_summ <- df_ex11 %>%
group_by(FoodCategory) %>%
summarize("Energy density (KJ/100 g)" = round(mean(`KJ_per100grams`), 1))
formatted_table(head(df_ex11_summ))
barplot(df_ex11_summ$`Energy density (KJ/100 g)`,
ylab = "Energy density (KJ/100 g)",
ylim = c(0, max(df_ex11_summ$`Energy density (KJ/100 g)` + 1000)),
names = df_ex11_summ$`FoodCategory`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "Energy Density per food catagory")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library("tidyverse")
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
#Your code here
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library("tidyverse")
library(kableExtra)
formatted_table <- function(df){
kbl(df) %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
}
file_path_ex1 <- "./files_13_data_visualization_exercises/exercise01/Food_Product_Emissions.csv"
df_ex1 <- read_csv(file_path_ex1)
formatted_table(head(df_ex1))
barplot(df_ex1$`Total Global Average GHG Emissions per kg`,
ylab = "Total Global Average GHG Emissions per kg",
ylim = c(0, max(df_ex1$`Total Global Average GHG Emissions per kg` + 20)),
names = df_ex1$`Food product`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "Food Product Emissions")
log2(8)
`Log2 Total Global Average GHG Emissions per kg` <- log2(df_ex1$`Total Global Average GHG Emissions per kg`)
df_ex2 <- df_ex1 %>%
add_column(`Log2 Total Global Average GHG Emissions per kg`)
formatted_table(head(df_ex2))
barplot(df_ex2$`Log2 Total Global Average GHG Emissions per kg`,
ylab = "Log2 Total Global Average GHG Emissions per kg",
ylim = c(min(df_ex2$`Log2 Total Global Average GHG Emissions per kg` - 4), max(df_ex2$`Log2 Total Global Average GHG Emissions per kg` + 4)),
names = df_ex2$`Food product`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "Food Product Emissions")
df_ex3 <- df_ex1[str_detect(df_ex1$`Food product`, "Oil"), ]
formatted_table(df_ex3)
df_ex3$`Land Use Change` <- NULL
df_ex3$Feed <- NULL
df_ex3 <- df_ex3[, 1:6]
formatted_table(df_ex3)
tidy_df_ex3 <- df_ex3 %>%
gather(`Farm`, `Processing`, `Transport`, `Packaging`, `Retail`, key = "Emission origin", value = "Emission per kg")
formatted_table(head(tidy_df_ex3))
p <- ggplot(data = tidy_df_ex3, aes(x = `Food product`, y = `Emission per kg`, fill = `Emission origin`)) +
geom_bar(stat = "identity", position="dodge") +
labs(title="Food Product Emissions") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Food product`, y = `Emission per kg`, fill = `Emission origin`)) +
geom_bar(stat = "identity", position="stack") +
labs(title="Food Product Emissions") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Food product`, y = `Emission per kg`, fill = `Emission origin`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="Food Product Emissions") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(tidy_df_ex3, aes(x = "", y = `Emission per kg`, fill = `Emission origin`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="Food Product Emissions") +
theme_void() # remove background, grid, numeric labels
p
file_path <- "./files_13_data_visualization_exercises/exercise07/calories.csv"
df_ex7 <- read_csv(file_path)
formatted_table(head(df_ex7))
df_ex7 <- df_ex7 %>%
separate_wider_delim(Cals_per100grams, delim = " ", names = c("Cals_per100grams", "waste")) %>%
separate_wider_delim(KJ_per100grams, delim = " ", names = c("KJ_per100grams", "waste2")) %>%
select (-c(waste, waste2)) %>% #Note that this is a negative selection. Selects all but the listed columns.
mutate_at(c('Cals_per100grams', 'KJ_per100grams'), as.numeric) #Creates numbers from strings
formatted_table(head(df_ex7))
p <- ggplot(df_ex7, aes(x = `FoodCategory`, y = `KJ_per100grams`)) +
geom_boxplot() +
labs(title="Energy per weight in different food categories") +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
ylab("Energy Density (KJ per 100 grams)") +
xlab("Food Category")
p
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
formatted_table(df_ex8)
library(ggradar)
df_ex8_scaled <- df_ex8[, -1]/400
formatted_table(df_ex8_scaled)
first_col <- df_ex8[, 1]
formatted_table(first_col)
df_ex8_mod <- cbind(first_col, df_ex8_scaled)
formatted_table(df_ex8_mod)
p <- ggradar(df_ex8_mod,  legend.text.size = 8, values.radar = c("0", "200", "400"), axis.label.size = 3, grid.label.size = 3, legend.position = "right") +
labs(title = "Chick weight from different diets at day 42") +
theme(plot.title = element_text(size = 14, ))
p
file_path <- "./files_13_data_visualization_exercises/exercise09/data.csv"
df_ex9 <- read_delim(file_path, delim=" ")
df_ex9$...6 <- NULL
formatted_table(head(df_ex9))
p <- ggplot(df_ex9, aes(x = `Potassium_conc`, y = `Sodium_conc`)) +
geom_point(aes(size = `Calories`), alpha = 0.5) +
scale_size(range = c(0.5, 12)) +
geom_text(aes(label=Item)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)")
p
file_path <- "./files_13_data_visualization_exercises/exercise10/meat-production-tonnes.csv"
df_ex10 <- read_csv(file_path)
df_ex10 <- rename(df_ex10, `Total mass (tonnes)`= `Meat, total | 00001765 || Production | 005510 || tonnes`)
formatted_table(head(df_ex10))
df_ex10_asia <- df_ex10 %>%
filter(Entity == "Asia")
formatted_table(head(df_ex10_asia))
p <- ggplot(data= df_ex10_asia, aes(x = Year, y = `Total mass (tonnes)`)) +
geom_line() +
labs(title="Meat production in Asia")
p
p <- ggplot(data= df_ex10_asia, aes(x = Year, y = `Total mass (tonnes)`)) +
geom_point() +
labs(title="Meat production in Asia")
p
file_path <- "./files_13_data_visualization_exercises/exercise11/calories.csv"
df_ex11 <- read_csv(file_path)
formatted_table(head(df_ex11))
df_ex11 <- df_ex11 %>%
separate_wider_delim(Cals_per100grams, delim = " ", names = c("Cals_per100grams", "waste")) %>%
separate_wider_delim(KJ_per100grams, delim = " ", names = c("KJ_per100grams", "waste2")) %>%
select (-c(waste, waste2)) %>% #Note that this is a negative selection. Selects all but the listed columns.
mutate_at(c('Cals_per100grams', 'KJ_per100grams'), as.numeric) #Creates numbers from strings
formatted_table(head(df_ex11))
df_ex11_summ <- df_ex11 %>%
group_by(FoodCategory) %>%
summarize("Energy density (KJ/100 g)" = round(mean(`KJ_per100grams`), 1))
formatted_table(head(df_ex11_summ))
barplot(df_ex11_summ$`Energy density (KJ/100 g)`,
ylab = "Energy density (KJ/100 g)",
ylim = c(0, max(df_ex11_summ$`Energy density (KJ/100 g)` + 1000)),
names = df_ex11_summ$`FoodCategory`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "Energy Density per food catagory")
